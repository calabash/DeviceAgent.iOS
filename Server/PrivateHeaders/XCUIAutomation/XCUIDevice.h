// class-dump results processed by bin/class-dump/dump.rb
//
//     Generated by classdump-c 4.2.0 (64 bit) (iOS port by DreamDevLost, Updated by Kevin Bradley.)(Debug version compiled May 27 2023 00:50:17).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <Foundation/Foundation.h>
#import <CoreGraphics/CoreGraphics.h>
#import <XCTest/XCUIElementTypes.h>
#import "CDStructures.h"
@protocol OS_dispatch_queue;
@protocol OS_xpc_object;

#import <objc/NSObject.h>

#import <UIKit/UIDevice.h>

@class NSString, XCTContext, XCUILocation, XCUIRemote, XCUISiriService, XCUISystem;
@protocol XCTSignpostListener, XCUIAccessibilityInterface, XCUIApplicationAutomationSessionProviding, XCUIApplicationMonitor, XCUIApplicationProcessManaging, XCUIDeviceAutomationModeInterface, XCUIDeviceDiagnostics, XCUIDeviceEventAndStateInterface, XCUIEventSynthesizing, XCUIInterruptionMonitoring, XCUIResetAuthorizationStatusOfProtectedResourcesInterface, XCUIScreenDataSource, XCUIXcodeApplicationManaging;


@protocol XCUIAccessibilityInterface;
@protocol XCUIXcodeApplicationManaging;

@interface XCUIDevice : NSObject
{
    BOOL _isLocal;
    BOOL _isSimulatorDevice;
    NSInteger _platform;
    id <XCUIAccessibilityInterface> _accessibilityInterface;
    id <XCUIApplicationMonitor> _applicationMonitor;
    id <XCUIEventSynthesizing> _eventSynthesizer;
    id <XCUIApplicationProcessManaging> _platformApplicationManager;
    id <XCUIXcodeApplicationManaging> _xcodeApplicationManager;
    id <XCUIDeviceEventAndStateInterface> _deviceEventAndStateInterface;
    id <XCUIApplicationAutomationSessionProviding> _applicationAutomationSessionProvider;
    XCUISiriService *_siriService;
    XCUISystem *_system;
    id <XCUIScreenDataSource> _screenDataSource;
    NSString *_uniqueIdentifier;
    XCUIRemote *_remote;
    id <XCUIInterruptionMonitoring> _interruptionMonitor;
    id <XCUIResetAuthorizationStatusOfProtectedResourcesInterface> _resetAuthorizationStatusInterface;
    id <XCUIDeviceDiagnostics> _diagnosticsProvider;
    id <XCUIDeviceAutomationModeInterface> _automationModeInterface;
    XCTContext *_reportingContext;
    NSString *_name;
    NSString *_alias;
    id <XCTSignpostListener> _signpostListener;
}

@property(nonatomic) NSInteger appearance;
@property(retain, nonatomic) XCUILocation *location;
@property(nonatomic) UIDeviceOrientation orientation;
@property(readonly) id <XCTSignpostListener> signpostListener;
@property(readonly) XCUISiriService *siriService;
@property(readonly) BOOL supportsPointerInteraction;
@property(readonly, nonatomic) XCUISystem *system;

+ (id)localDevice;
+ (void)setLocalDevice:(id)arg1;
+ (XCUIDevice *)sharedDevice;
- (void)_clearSimulatedLocation;
- (NSUInteger)_setModifiers:(NSUInteger)arg1 merge:(BOOL)arg2 beginPersistentState:(BOOL)arg3 description:(id)arg4;
- (void)_setOrientation:(NSInteger)arg1;
- (void)_silentPressButton:(NSInteger)arg1;
- (id)accessibilityInterface;
- (id)alias;
- (NSInteger)appearanceMode;
- (id)applicationAutomationSessionProvider;
- (id)applicationMonitor;
- (void)attachLocalizableStringsData;
- (id)automationModeInterface;
- (BOOL)configuredForUITesting;
- (id)deviceEventAndStateInterface;
- (id)diagnosticAttachmentsForError:(id)arg1;
- (id)diagnosticsProvider;
- (BOOL)enableAutomationMode:(id *)arg1;
- (id)eventSynthesizer;
- (BOOL)hasHardwareButton:(NSInteger)arg1;
- (void)holdHomeButtonForDuration:(double)arg1;
- (id)initLocalDeviceWithPlatform:(NSInteger)arg1;
- (id)initWithDiagnosticProvider:(id)arg1;
- (id)interruptionMonitor;
- (BOOL)isLocal;
- (BOOL)isSimulatorDevice;
- (id)mainScreen;
- (id)mainScreenOrError:(id *)arg1;
- (id)makeDiagnosticScreenshotAttachmentForDevice;
- (id)makeDiagnosticScreenshotAttachmentsForDevice;
- (id)name;
- (BOOL)performDeviceEvent:(id)arg1 error:(id *)arg2;
- (void)performWithKeyModifiers:(NSUInteger)arg1 block:(CDUnknownBlockType)arg2;
- (NSInteger)platform;
- (id)platformApplicationManager;
- (BOOL)playBackHIDEventRecordingFromURL:(id)arg1 error:(id *)arg2;
- (void)pressButton:(NSInteger)arg1;
- (void)pressLockButton;
- (id)remote;
- (void)remoteAutomationSessionDidDisconnect:(id)arg1;
- (id)reportingContext;
- (id)resetAuthorizationStatusInterface;
- (void)rotateDigitalCrown:(double)arg1 velocity:(double)arg2;
- (void)rotateDigitalCrownByDelta:(double)arg1;
- (void)rotateDigitalCrownByDelta:(double)arg1 withVelocity:(double)arg2;
- (id)screenDataSource;
- (id)screenWithDisplayID:(NSInteger)arg1 orError:(id *)arg2;
- (id)screens;
- (id)screensOrError:(id *)arg1;
- (void)setAlias:(id)arg1;
- (void)setAppearanceMode:(NSInteger)arg1;
- (id)spindumpAttachmentForProcessID:(NSInteger)arg1 error:(id *)arg2;
- (BOOL)startHIDEventRecordingWithError:(id *)arg1;
- (BOOL)stopHIDEventRecordingAndSaveToURL:(id)arg1 error:(id *)arg2;
- (BOOL)supportsPressureInteraction;
- (id)uniqueIdentifier;
- (id)xcodeApplicationManager;

@end

